<?php
/**
 * Email Base class
 *
 * This is an abstract class which is designed to implement the IEmail
 * interface and define the send() method which is implemented from the
 * IEmail interface.
 *
 * @abstract
 * @author     Oliver Spryn
 * @copyright  Copyright (c) 2013 and Onwards, ForwardFour Innovations
 * @implements IEmail
 * @license    MIT
 * @namespace  FFI\TA
 * @package    lib.email
 * @since      1.0
*/

namespace FFI\BE;

require_once(dirname(dirname(dirname(dirname(dirname(dirname(__FILE__)))))) . "/wp-blog-header.php");
require_once(dirname(dirname(__FILE__)) . "/exceptions/Network_Connection_Error.php");
require_once(dirname(dirname(__FILE__)) . "/exceptions/Mandrill_Send_Failed.php");
require_once(dirname(dirname(__FILE__)) . "/interfaces/IEmail.php");

abstract class Email_Base implements IEmail {
/**
 * Hold the address of the person sending the email
 *
 * @access public
 * @type   string
*/

	public $fromEmail;
	
/**
 * Hold the name of the person sending the email
 *
 * @access public
 * @type   string
*/
	
	public $fromName;
	
/**
 * Hold the HTML version of the email body
 *
 * @access protected
 * @type   string
*/
	
	protected $HTMLBody;
	
/**
 * Hold the subject of the email
 *
 * @access public
 * @type   string
*/
	
	public $subject;
	
/**
 * Hold the plain text version of the email body
 *
 * @access protected
 * @type   string
*/
	
	protected $textBody;
	
/**
 * Hold the address of the person receiving the email
 *
 * @access public
 * @type   string
*/
	
	public $toEmail;
	
/**
 * Hold the name of the person receiving the email
 *
 * @access public
 * @type   string
*/
	
	public $toName;

/**
 * Send the email which was generated by one of the child
 * classes to Mandrill for processing
 *
 * @access public
 * @return void
 * @throws Network_Connection_Error Thrown in the event there is an error while trying to communicate with Mandrill
 * @throws Mandrill_Send_Failed     Thrown in the event that Mandrill cannot send the email
 * @since  1.0
*/

	public function send() {
		global $wpdb;
	
	//Fetch the Mandrill API key
		$key = $wpdb->get_results("SELECT `MandrillKey` FROM `ffi_ta_apis`");
	
	//Assemble the API call
		$args = array(
			"key" => $key[0]->MandrillKey,
			"message" => array(
				"to" => array(array("email" => $this->toEmail, "name" => $this->toName)),
				"from_name" => $this->fromName,
				"from_email" => $this->fromEmail,
				"subject" => $this->subject,
				"html" => $this->HTMLBody,
				"text" => $this->textBody,
				"track_opens" => true,
				"track_clicks" => true,
				"auto_text" => false
			)
		);
		
	//Open a cURL session for making the call
		$curl = curl_init("https://mandrillapp.com/api/1.0/messages/send.json");

		curl_setopt($curl, CURLOPT_HEADER, false);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));
		curl_setopt($curl, CURLOPT_POST, true);
		curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

		$response = json_decode(curl_exec($curl));
		$errorNumber = curl_errno($curl);
		$error = curl_error($curl);
		curl_close($curl);
		
	//Check for any network errors
		if ($errorNumber) {
			throw new Network_Connection_Error("A network connection to Mandrill has failed. cURL error details: " . $error);
		}
		
	//Ensure Mandrill has sent the email
		if ($response[0]->status != "sent") {
			throw new Mandrill_Send_Failed("Mandrill could not send an email to " . $response[0]->email . ". Status: " . $response[0]->status . " Reason: " . $response[0]->reject_reason);
		}
	}
}
?>